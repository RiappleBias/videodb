$sudo passwd "设置了root密码

"安装vmwaretools
"点击VMware的虚拟机
"点击安装vmwaretools
"复制vmware-tools 到 home目录下新建的temp
$cd temp 
$tar xzvf  vmware-tools.tar.gz
$cd vmware-tools-distrib
$sudo ./vmware-install.pl

"改LINUX用户命令行提示为为彩色显示
$cd ~
"用vim或者gedit打开 .bashrc
 “在末尾fi下一行添加
 
if [ -e /usr/share/terminfo/x/xterm-256color ]; then
export TERM='xterm-256color'
else
export TERM='xterm-color'
fi
PS1="\[\033[1;37;1m\][\[\033[0;36;1m\]\u\[\033[0;35;1m\]@\\[\033[0;33;1m\]\h:\[\033[1;34;1m\]\w\[\033[1;37;1m\]]\[\033[1;31;1m\]\$ \[\033[0m\]"

"改变putty显示背景
"使用系统颜色配置不打勾
"颜色配置选择前景色和背景色为自己想要的颜色，推荐护眼颜色为前景色131，148，150，背景色为0,43,53

"更新安装源方法：
1、修改源地址：
sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak "备份
sudo vim /etc/apt/sources.list
加入如下内容（中科大的）：

deb http://mirrors.ustc.edu.cn/ubuntu/ precise-updates main restricted
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise-updates main restricted
deb http://mirrors.ustc.edu.cn/ubuntu/ precise universe
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise universe
deb http://mirrors.ustc.edu.cn/ubuntu/ precise-updates universe
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise-updates universe
deb http://mirrors.ustc.edu.cn/ubuntu/ precise multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ precise-updates multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise-updates multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiverse
deb http://security.ubuntu.com/ubuntu precise-security main restricted
deb-src http://security.ubuntu.com/ubuntu precise-security main restricted
deb http://security.ubuntu.com/ubuntu precise-security universe
deb-src http://security.ubuntu.com/ubuntu precise-security universe
deb http://security.ubuntu.com/ubuntu precise-security multiverse
deb-src http://security.ubuntu.com/ubuntu precise-security multiverse

比较快的源：

搜狐源：
deb http://mirrors.sohu.com/ubuntu/ precise-updates main restricted
deb-src http://mirrors.sohu.com/ubuntu/ precise-updates main restricted
deb http://mirrors.sohu.com/ubuntu/ precise universe
deb-src http://mirrors.sohu.com/ubuntu/ precise universe
deb http://mirrors.sohu.com/ubuntu/ precise-updates universe
deb-src http://mirrors.sohu.com/ubuntu/ precise-updates universe
deb http://mirrors.sohu.com/ubuntu/ precise multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-updates multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-updates multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-backports main restricted universe multiverse

网易源：

deb http://mirrors.163.com/ubuntu/ precise-updates main restricted
deb-src http://mirrors.163.com/ubuntu/ precise-updates main restricted
deb http://mirrors.163.com/ubuntu/ precise universe
deb-src http://mirrors.163.com/ubuntu/ precise universe
deb http://mirrors.163.com/ubuntu/ precise-updates universe
deb-src http://mirrors.163.com/ubuntu/ precise-updates universe
deb http://mirrors.163.com/ubuntu/ precise multiverse
deb-src http://mirrors.163.com/ubuntu/ precise multiverse
deb http://mirrors.163.com/ubuntu/ precise-updates multiverse
deb-src http://mirrors.163.com/ubuntu/ precise-updates multiverse
deb http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse
更新看看速度：
sudo apt-get update
sudo apt-get upgrade



"安装ssh
sudo apt install ssh "安装ssh
ps -elf|grep ssh "查看ssh否安装，有sshD则安装成功

"安装app
sudo apt install git   "安装git和配置用户
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
"安装编译YCM的插件
sudo apt install vim-nox-py2   "输入sudo update-alternatives --config vim选择vim版本
vim --version | grep python  "查看vim是否支持python,显示+则支持
sudo apt install gcc
sudo apt install g++
sudo apt install python-dev python3-dev "安装python
sudo apt install cmake "安装cmake
sudo apt install clang "安装clang
sudo apt install libclang-dev "安装libcang
sudo apt install ctags "安装ctags

"安装vundle
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
vim ~/.vimrc
"添加
set nocompatible 
filetype off 
set rtp+=~/.vim/bundle/Vundle.vim 
call vundle#begin() 
Plugin 'gmarik/Vundle.vim'
call vundle#end() 
filetype plugin indent on 
"保存后
vim 
esc
:PluginInstall
“显示done则成功

"卸载vundle相应的插件，在.vimrc中删除相应插件，然后输入vim,再输入BundleClean

"vundle常用命令
"BundleList         -列举列表(也就是.vimrc)中配置的所有插件  
"BundleInstall      -安装列表中的全部插件  
"BundleInstall!     -更新列表中的全部插件  
"BundleSearch foo   -查找foo插件  
"BundleSearch! foo  -刷新foo插件缓存  
"BundleClean        -清除列表中没有的插件  
"BundleClean!       -清除列表中没有的插件
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"安装youcompleteme
git clone https://github.com/Valloric/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe
cd ~/.vim/bundle/YouCompleteMe
git submodule update --init --recursive

cd ~
vim ~/.vimrc
"添加
set nocompatible 
filetype off 
set rtp+=~/.vim/bundle/Vundle.vim 
call vundle#begin() 
Plugin 'gmarik/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
call vundle#end() 
filetype plugin indent on 
保存后
vim 
esc+++++++++++
:PluginInstall
“显示done则成功
:w
“编译YouCompleteMe
cd ~/.vim/bundle/YouCompleteMe 
./install.py --clang-completer --system-libclang
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"配置YCM的文件
gedit ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py
在flags的括号中添加
'-isystem',
'/usr/include',
'-isystem',
'usr/include/c++/5.4.0',
'-isystem',
'usr/include/x86_64-linux-gnu/c++',

注释掉：加#号
#try:
#final_flags.remove( '-stdlib=libc++' )
#except ValueError:
#pass
保存后安装成功

cd ~
gedit .vimrc
把内容换为以下的内容

"插件安转
set nocompatible
set rtp+=~/.vim/bundle/Vundle.vim 
call vundle#begin() 
Plugin 'gmarik/Vundle.vim'  "安装vundle插件管理器
Plugin 'Valloric/YouCompleteMe'  "安装youcompleteme自动补全
Plugin 'vim-scripts/DoxygenToolkit.vim'  "自动注释插件
Plugin 'bling/vim-airline' "状态栏插件
Plugin 'majutsushi/tagbar' "侧边栏自动分类折叠统计插件，F3关闭开启 
Plugin 'altercation/vim-colors-solarized' "主题solatized，背景色需要是黑色
Plugin 'tomasr/molokai' "主题molokai，切换主题：colorscheme 主题名
Plugin 'vim-scripts/khaki.vim' 
call vundle#end()
"""""""""""""""""""""""""""""""""""
"主题设置
if !has("gui_running")                                          
	    set t_Co=256                                                
	endif     
colorscheme molokai "切换主题为MOLOKAI
syntax enable
"set background=dark
"let g:solarized_termcolors=256
"colorscheme solarized "切换主题为SOLARIZED
"vim 输入 colorscheme molokai切换主题,colorscheme 查看当前主题,colorscheme 空格 tab键 列出所有主题

	
""""""""""""""""""""""""""""""""""
"tagbar设置
let g:tagbar_ctags_bin='ctags'            "ctags程序的路径
let g:tagbar_width=30                    "窗口宽度的设置
map <F3> :Tagbar<CR>
"autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()     "如果是c语言的程序的话，tagbar自动开启
""""""""""""""""""""""""""""""""""""
"设置状态栏airline
set laststatus=2
"let g:Powerline_symbols='unicode'
"""""""""""""""""""""""""""""""""""""""
" YCM配置
"配置全局路径
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py' 
" 允许自动加载.ycm_extra_conf.py，不再提示                         
let g:ycm_confirm_extra_conf=0                                     
" 补全功能在注释中同样有效                                         
let g:ycm_complete_in_comments=1                                   
" 开启tags补全引擎                                                 
let g:ycm_collect_identifiers_from_tags_files=1                    
" 键入第一个字符时就开始列出匹配项                                 
let g:ycm_min_num_of_chars_for_completion=1                        
" YCM相关快捷键，分别是\gl, \gf, \gg                                                    
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>              
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>               
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
" 引入 C++ 标准库tags
set tags+=/data/misc/vim/stdcpp.tags
"补全内容不以分割子窗口形式出现，只显示补全列表
set completeopt=preview,menu "代码补全功能，可以选择preview，menu或者longset，menu
" 禁止缓存匹配项，每次都重新生成匹配项  
"let g:ycm_cache_omnifunc=0  
" 语法关键字补全              
let g:ycm_seed_identifiers_with_syntax=1

"3个快捷键设置是用来快速跳转到符号声明或定义的。往往只用gg，即将光标定位到某个符号上，按\键后（默认的leader键是\），快速按两次g键，将跳转到该符号的声明或定义位置（Tips: 按<ctrl>+o返回）
"执行:YcmDiags显示所有错误, 它其实是打开了一个location list窗口,也可能通过:lopen打开. 使用:lclose可以关闭
"有些系统函数如fopen, strcpy如果不智能提示，可以按<Ctrl>+<Space>键。
"如果有的文件死活无法正确提示（如果结构体之类），请检查一下文件编码，改成utf-8。（vim中 :set fileencoding=utf8)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"DOxygenToolkit设置自动注释添加作者
let g:DoxygenToolkit_authorName="zzq@moon.net"
"将光标定位到文件首行，输入:DoxAuthor将插入文件头注释骨架（第一次会让你输入文件版本号）
"在光标定位到数据结构声明或函数声明的第一行，运行:Dox，将生成数据结构或函数的注释骨架
"并把光标定位在@brief 后，期待你输入具体的注释内容
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"vim其他设置
set history=100 "设置输入历史的行数
set dictionary +=/usr/include "shezhiyonghuzidian
set confirm "在处理未保存或只读文件的时候，弹出确认
filetype plugin indent on "文件类型插件缩进开
filetype on "侦测文件类型  
filetype indent on "针对不同的文件类型采用不同的缩进格式  
filetype plugin on "针对不同的文件类型加载对应的插件 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""'
"文本格式和排版"
set list "显示Tab符    
set listchars=tab:\:\ ,  "使用：代替制表符，方便对齐显示，可以改为自己想要的符号
set tabstop=4 "制表符为4  
set autoindent "自动对齐（继承前一行的缩进方式）  
set smartindent "智能自动缩进（以c程序的方式）  
set softtabstop=4
set shiftwidth=4 "换行时行间交错使用4个空格  
set noexpandtab "不要用空格代替制表符  
set cindent "使用C样式的缩进  
set smarttab "在行和段开始处使用制表符  
set nowrap "不要换行显示一行   
set backspace=2 "使回格键（backspace）正常处理indent, eol, start等
set matchtime=4 "匹配括号高亮的时间（单位是十分之一秒）
set showmatch "高亮显示匹配的括号,类似当输入一个左括号时会匹配相应的那个右括号
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"搜索相关"
set hlsearch "开启高亮显示结果   
set nowrapscan "搜索到文件两端时不重新搜索  
set incsearch "开启实时搜索功能 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"文件编码相关"
"set fenc=utf-8  
"set encoding=utf-8 "设置vim的工作编码为utf-8，如果源文件不是此编码，vim会进行转换后显示  
"set fileencoding=utf-8 "让vim新建文件和保存文件使用utf-8编码  
set fileencodings=utf-8,gbk,cp936,latin-1,ucs-bom,GB18030 "设置文字编码
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"显示相关
syntax on "语法高亮 
set number "显示行号

"开启光亮光标行
set cursorline
"highlight CursorLine   cterm=NONE ctermbg=NONE ctermfg=NONE guibg=darkred guifg=white
"开启高亮光标列
set cursorcolumn
"highlight CursorColumn cterm=NONE ctermbg=NONE ctermfg=NONE guibg=darkred guifg=white
"其中Cursorline和CursorColumn分别表示光标所在的行和列，根据一般用户的习惯，高亮行就可以了（我试过高亮列，看起来异常不协调，哈哈哈，有兴趣的可以试试），
"可以把darkred，white等换成你喜欢的颜色。另附上vim官网关于高亮显示当前行的tip
"Vim识别三种不同的终端：term，黑白终端；cterm，彩色终端；gui，Gvim窗口。
"term，可以定义其字体显示为：bold、underline、reverse、italic或standout。例如以下命令，用逗号来组合使用这些属性：
":highlight Keyword term=reverse,bold
"cterm，可以用ctermfg设置前景色；用ctermbg设置背景色。例如以下命令，定义蓝底红字并使用下划线来显示注释：
":highlight Comment cterm=underline ctermfg=red ctermbg=blue
"gui，可以使用选项gui=attribute，来定义图形窗口下语法元素的显示属性。选项guifg和guibg，用来定义了前景色和背景色。推荐使用的颜色包括：black, brown, grey, blue, green, cyan, magenta, yellow, white。
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"启用代码折叠,用空格键来开关折叠
set foldenable "允许折叠  
set foldmethod=syntax "语法折叠
set foldcolumn=0 "设置折叠区域的宽度  
setlocal foldlevel=1 "设置折叠层数为  
set foldlevel=100 "禁止自动折叠
nnoremap <space> @=((foldclosed(line('.'))<0)?'zc':'zo')<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""'
"括号自动补齐括号引号自动跳格，注意每句话只有不要加空格
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {<CR>}<ESC>O
autocmd Syntax html,vim inoremap < <lt>><Esc>i| inoremap > <c-r>=ClosePair('>')<CR>
inoremap ) <c-r>=ClosePair(')')<CR>
inoremap ] <c-r>=ClosePair(']')<CR>
inoremap } <c-r>=CloseBracket()<CR>
inoremap " <c-r>=QuoteDelim('"')<CR>
inoremap ' <c-r>=QuoteDelim("'")<CR>
function ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endfunction
function CloseBracket()
    if match(getline(line('.') + 1), '\s*}') < 0
        return "\<CR>}"
    else
        return "\<Esc>j0f}a"
endif
endfunction
   
function QuoteDelim(char)
   let line = getline('.')
   let col = col('.')
   if line[col - 2] == "\\"
"Inserting a quoted quotation mark into the string  
        return a:char
    elseif line[col - 1] == a:char
"Escaping out of the string  
        return "\<Right>"  
    else  
"Starting a string  
        return a:char.a:char."\<Esc>i"  
    endif  
endfunction

保存后vim中安装插件状态栏和自动注释插件，PluginInstall